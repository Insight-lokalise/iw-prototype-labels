/* ==========================================================================
   #GRID
   ========================================================================== */

/**
 * Flexbox Grid System.
 *
 * The grid object provides us with a column-style grid system. This file
 * contains the basic structural elements, but classes should be complemented
 * with width utilities, for example:
 *
 *   <div class="o-grid">
 *     <div class="o-grid__item  u-1/2">
 *     </div>
 *     <div class="o-grid__item  u-1/2">
 *     </div>
 *   </div>
 *
 * The above will create a two-column structure in which each column will
 * fluidly fill half of the width of the parent. We can have more complex
 * systems:
 *
 *   <div class="o-grid">
 *     <div class="o-grid__item  u-1/1  u-1/3@tablet">
 *     </div>
 *     <div class="o-grid__item  u-1/2  u-1/3@tablet">
 *     </div>
 *     <div class="o-grid__item  u-1/2  u-1/3@tablet">
 *     </div>
 *   </div>
 *
 * The above will create a system in which the first item will be 100% width
 * until we enter our tablet breakpoint, when it will become 33.333% width. The
 * second and third items will be 50% of their parent, until they also become
 * 33.333% width at the medium breakpoint.
 *
 * We can also manipulate entire grid systems by adding a series of modifiers
 * to the `.o-grid` block. For example:
 *
 *   <div class="o-grid  o-grid--reverse">
 *
 * This will reverse the displayed order of the system so that it runs in the
 * opposite order to our source, effectively flipping the system over.
 *
 *   <div class="o-grid  o-grid--[right|center]">
 *
 * This will cause the system to fill up from either the centre or the right
 * hand side. Default behaviour is to fill up the layout system from the left.
 *
 * There are plenty more options available to us: explore them below.
 */





/* Default/mandatory classes
   ========================================================================== */

.o-grid {
  display: flex;
  flex-wrap: wrap;
  position: relative;
}

  .o-grid__item {
    flex: 1;
    min-height: 1px;
    width: 100%;
  }





/* Vertical alignment modifiers
   ========================================================================== */

/**
 * Top align grid items.
 */

.o-grid--top {
  align-items: flex-start;
}



/**
 * Bottom align grid items.
 */

.o-grid--bottom {
  align-items: flex-end;
}



/**
 * Vertically center align grid items.
 */

.o-grid--center {
  align-items: center;
}



/**
 * Vertically baseline align grid items.
 */

.o-grid--baseline {
  align-items: baseline;
}





/**
 * Top align individual grid item.
 */

.o-grid__item--top {
  align-self: flex-start;
}



/**
 * Bottom align individual grid item.
 */

.o-grid__item--bottom {
  align-self: flex-end;
}



/**
 * Vertically center align individual grid item.
 */

.o-grid__item--center {
  align-self: center;
}



/**
 * Vertically baseline align individual grid item.
 */

.o-grid__item--baseline {
  align-self: baseline;
}





/* Horizontal alignment modifiers
   ========================================================================== */

/**
 * Grid items are packed toward the start line. This will likely only be needed
 * when using in conjunction with `.o-grid--reverse`.
 */

.o-grid--justify-left {
  justify-content: flex-start;
}



/**
 * Grid items are packed toward the end line.
 */

.o-grid--justify-right {
  justify-content: flex-end;
}



/**
 * Grid items are centered along the line.
 */

.o-grid--justify-center {
  justify-content: center;
}



/**
 * Grid items are evenly distributed in the line.
 * First item is on the start line, last item on the end line.
 */

.o-grid--justify-between {
  justify-content: space-between;
}



/**
 * Grid items are evenly distributed in the line with equal space around them.
 * Note that visually the spaces aren't equal, since all the items have equal
 * space on both sides. The first item will have one unit of space against the
 * container edge, but two units of space between the next item because that
 * next item has its own spacing that applies.
 */

.o-grid--justify-around {
  justify-content: space-around;
}



/**
 * Grid items are distributed so that the spacing between any two items (and the
 * space to the edges) is equal.
 */

.o-grid--justify-evenly {
  justify-content: space-evenly;
}





/**
 * Reverse the rendered order of the grid system.
 */

.o-grid--reverse {
  direction: rtl;

  > .o-grid__item {
    direction: ltr;
  }

}





/**
 * Shrink individual grid cells to fit their content.
 */

.o-grid__item--shrink {
  flex: 0 0 auto;
  width: auto;
}





// A mixin to spit out our gutter classes. Pass in an optional suffix for
// responsive widths.

@mixin gutters($breakpoint: null) {

  @each $gutter-name, $gutter-value in $global-spacing-sizes {

    .o-grid--gutters#{$gutter-name}#{$breakpoint} {
      margin-left: -$gutter-value;

      > .o-grid__item {
        padding-left: $gutter-value;
      }
    }

  }

}





/**
 * A series of gutter classes that you can use to space out grid items. Classes
 * take the format `.o-grid--gutters-tiny`. Use these in your markup:
 *
 * <div class="o-grid  o-grid--gutters-tiny">
 *
 * The following will generate gutter classes based on the values defined in
 * the `$global-spacing-sizes` list.
 */

@include gutters();





/**
 * Using Sass-MQ, automatically generate horizontal gutters for each of our
 * defined breakpoints, and give them a Responsive Suffix, e.g.:
 *
 * <div class="o-grid  o-grid--gutters-tiny@tablet">


 */

@each $bp-name, $bp-value in $mq-breakpoints {

  @include mq($from: $bp-name) {

    @include gutters(\@#{$bp-name});

  }

}
